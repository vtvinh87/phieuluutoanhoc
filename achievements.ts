
import { Achievement, GradeLevel, IslandConfig, IslandDifficulty, IslandProgressState, IslandStarRatingsState, AllGradesStarRatingsState, CollectedItemsState, AchievementContext } from './types';
import { ISLAND_CONFIGS, ISLANDS_PER_GRADE, COLLECTIBLE_ITEMS, GRADE_LEVEL_TEXT_MAP, FINAL_TREASURE_ISLAND_ID } from './constants';

const getIslandsForGrade = (grade: GradeLevel): IslandConfig[] => {
  if (grade === GradeLevel.FINAL) {
    return ISLAND_CONFIGS.filter(island => island.islandId === FINAL_TREASURE_ISLAND_ID);
  }
  return ISLAND_CONFIGS.filter(island => island.targetGradeLevel === grade && island.islandId !== FINAL_TREASURE_ISLAND_ID);
};

export const ALL_ACHIEVEMENTS: Achievement[] = [
  // --- Grade Specific Achievements ---
  ...(Object.values(GradeLevel).filter(g => typeof g === 'number' && g !== GradeLevel.FINAL) as GradeLevel[]).map(grade => ({
    id: `ACH_ISLAND_EXPLORER_G${grade}`,
    name: `Nh√† Th√°m Hi·ªÉm L·ªõp ${GRADE_LEVEL_TEXT_MAP[grade]}`,
    description: () => `Ho√†n th√†nh 1 h√≤n ƒë·∫£o ·ªü L·ªõp ${GRADE_LEVEL_TEXT_MAP[grade]}.`,
    icon: 'üèùÔ∏è',
    gradeSpecific: true,
    condition: (context: AchievementContext) => {
      const { selectedGrade, islandProgress } = context;
      if (selectedGrade !== grade || !islandProgress) return false;
      const islandsInGrade = getIslandsForGrade(grade);
      return islandsInGrade.some(island => islandProgress[island.islandId] === 'completed');
    }
  })),
  ...(Object.values(GradeLevel).filter(g => typeof g === 'number' && g !== GradeLevel.FINAL) as GradeLevel[]).map(grade => ({
    id: `ACH_ISLAND_CONQUEROR_G${grade}`,
    name: `Chinh Ph·ª•c Gia L·ªõp ${GRADE_LEVEL_TEXT_MAP[grade]}`,
    description: () => `Ho√†n th√†nh 3 h√≤n ƒë·∫£o kh√°c nhau ·ªü L·ªõp ${GRADE_LEVEL_TEXT_MAP[grade]}.`,
    icon: 'üó∫Ô∏è',
    gradeSpecific: true,
    condition: (context: AchievementContext) => {
      const { selectedGrade, islandProgress } = context;
      if (selectedGrade !== grade || !islandProgress) return false;
      const islandsInGrade = getIslandsForGrade(grade);
      const completedCount = islandsInGrade.filter(island => islandProgress[island.islandId] === 'completed').length;
      return completedCount >= 3;
    }
  })),
  ...(Object.values(GradeLevel).filter(g => typeof g === 'number' && g !== GradeLevel.FINAL) as GradeLevel[]).map(grade => ({
    id: `ACH_GRADE_CHAMPION_G${grade}`,
    name: `V√¥ ƒê·ªãch L·ªõp ${GRADE_LEVEL_TEXT_MAP[grade]}`,
    description: () => `Ho√†n th√†nh t·∫•t c·∫£ c√°c h√≤n ƒë·∫£o ·ªü L·ªõp ${GRADE_LEVEL_TEXT_MAP[grade]}.`,
    icon: 'üèÜ',
    gradeSpecific: true,
    condition: (context: AchievementContext) => {
      const { selectedGrade, islandProgress } = context;
      if (selectedGrade !== grade || !islandProgress) return false;
      const islandsInGrade = getIslandsForGrade(grade);
      if (islandsInGrade.length === 0 || islandsInGrade.length < ISLANDS_PER_GRADE) return false; 
      return islandsInGrade.every(island => islandProgress[island.islandId] === 'completed');
    }
  })),
  ...(Object.values(GradeLevel).filter(g => typeof g === 'number' && g !== GradeLevel.FINAL) as GradeLevel[]).map(grade => ({
    id: `ACH_STAR_NOVICE_G${grade}`,
    name: `Ng√¥i Sao Hy V·ªçng L·ªõp ${GRADE_LEVEL_TEXT_MAP[grade]}`,
    description: () => `ƒê·∫°t ƒë∆∞·ª£c t·ªïng c·ªông 10 sao ·ªü L·ªõp ${GRADE_LEVEL_TEXT_MAP[grade]}.`,
    icon: '‚≠ê',
    gradeSpecific: true,
    condition: (context: AchievementContext) => {
      const { selectedGrade, islandStarRatings } = context;
      if (selectedGrade !== grade || !islandStarRatings) return false;
      const islandsInGrade = getIslandsForGrade(grade);
      const totalStars = islandsInGrade.reduce((sum, island) => sum + (islandStarRatings[island.islandId] || 0), 0);
      return totalStars >= 10;
    }
  })),
   ...(Object.values(GradeLevel).filter(g => typeof g === 'number' && g !== GradeLevel.FINAL) as GradeLevel[]).map(grade => ({
    id: `ACH_STAR_COLLECTOR_G${grade}`,
    name: `S∆∞u T·∫ßm Sao L·ªõp ${GRADE_LEVEL_TEXT_MAP[grade]}`,
    description: () => `ƒê·∫°t ƒë∆∞·ª£c t·ªïng c·ªông 25 sao ·ªü L·ªõp ${GRADE_LEVEL_TEXT_MAP[grade]}.`,
    icon: 'üåü',
    gradeSpecific: true,
    condition: (context: AchievementContext) => {
      const { selectedGrade, islandStarRatings } = context;
      if (selectedGrade !== grade || !islandStarRatings) return false;
      const islandsInGrade = getIslandsForGrade(grade);
      const totalStars = islandsInGrade.reduce((sum, island) => sum + (islandStarRatings[island.islandId] || 0), 0);
      return totalStars >= 25;
    }
  })),
  ...(Object.values(GradeLevel).filter(g => typeof g === 'number' && g !== GradeLevel.FINAL) as GradeLevel[]).map(grade => ({
    id: `ACH_PERFECT_ISLAND_G${grade}`,
    name: `Ho√†n H·∫£o ƒê·∫ßu Ti√™n L·ªõp ${GRADE_LEVEL_TEXT_MAP[grade]}`,
    description: () => `ƒê·∫°t 5 sao cho m·ªôt h√≤n ƒë·∫£o b·∫•t k·ª≥ ·ªü L·ªõp ${GRADE_LEVEL_TEXT_MAP[grade]}.`,
    icon: '‚ú®',
    gradeSpecific: true,
    condition: (context: AchievementContext) => {
      const { selectedGrade, islandStarRatings } = context;
      if (selectedGrade !== grade || !islandStarRatings) return false;
      const islandsInGrade = getIslandsForGrade(grade);
      return islandsInGrade.some(island => islandStarRatings[island.islandId] === 5);
    }
  })),
  ...(Object.values(GradeLevel).filter(g => typeof g === 'number' && g !== GradeLevel.FINAL) as GradeLevel[]).map(grade => ({
    id: `ACH_MASTER_OF_ISLANDS_G${grade}`,
    name: `B·∫≠c Th·∫ßy Ho√†n H·∫£o L·ªõp ${GRADE_LEVEL_TEXT_MAP[grade]}`,
    description: () => `ƒê·∫°t 5 sao cho 3 h√≤n ƒë·∫£o kh√°c nhau ·ªü L·ªõp ${GRADE_LEVEL_TEXT_MAP[grade]}.`,
    icon: 'üèÖ',
    gradeSpecific: true,
    condition: (context: AchievementContext) => {
      const { selectedGrade, islandStarRatings } = context;
      if (selectedGrade !== grade || !islandStarRatings) return false;
      const islandsInGrade = getIslandsForGrade(grade);
      const fiveStarIslandsCount = islandsInGrade.filter(island => islandStarRatings[island.islandId] === 5).length;
      return fiveStarIslandsCount >= 3;
    }
  })),
  ...(Object.values(GradeLevel).filter(g => typeof g === 'number' && g !== GradeLevel.FINAL) as GradeLevel[]).map(grade => ({
    id: `ACH_TRUE_EXPLORER_G${grade}`,
    name: `Nh√† Kh√°m Ph√° ƒê√≠ch Th·ª±c L·ªõp ${GRADE_LEVEL_TEXT_MAP[grade]}`,
    description: () => `M·ªü kh√≥a t·∫•t c·∫£ c√°c h√≤n ƒë·∫£o ·ªü L·ªõp ${GRADE_LEVEL_TEXT_MAP[grade]}.`,
    icon: 'üóùÔ∏è',
    gradeSpecific: true,
    condition: (context: AchievementContext) => {
      const { selectedGrade, islandProgress, islandsForGrade } = context; 
      if (selectedGrade !== grade || !islandProgress || !islandsForGrade ) return false;
      if (islandsForGrade.length === 0 || islandsForGrade.length < ISLANDS_PER_GRADE) return false;
      return islandsForGrade.every(island => islandProgress[island.islandId] === 'unlocked' || islandProgress[island.islandId] === 'completed');
    }
  })),
  ...(Object.values(GradeLevel).filter(g => typeof g === 'number' && g !== GradeLevel.FINAL) as GradeLevel[]).map(grade => ({
    id: `ACH_GRADE_PERFECTIONIST_G${grade}`,
    name: `B·∫≠c Th·∫ßy To√†n Sao L·ªõp ${GRADE_LEVEL_TEXT_MAP[grade]}`,
    description: () => `ƒê·∫°t 5 sao cho T·∫§T C·∫¢ c√°c h√≤n ƒë·∫£o ·ªü L·ªõp ${GRADE_LEVEL_TEXT_MAP[grade]}.`,
    icon: 'üíØ',
    gradeSpecific: true,
    condition: (context: AchievementContext) => {
      const { selectedGrade, islandStarRatings, islandsForGrade } = context;
      if (selectedGrade !== grade || !islandStarRatings || !islandsForGrade) return false;
      if (islandsForGrade.length === 0 || islandsForGrade.length < ISLANDS_PER_GRADE) return false;
      return islandsForGrade.every(island => islandStarRatings[island.islandId] === 5);
    }
  })),
  ...(Object.values(GradeLevel).filter(g => typeof g === 'number' && g !== GradeLevel.FINAL) as GradeLevel[]).map(grade => ({
    id: `ACH_HARD_MODE_WARRIOR_G${grade}`,
    name: `Chi·∫øn Binh C·∫•p Kh√≥ L·ªõp ${GRADE_LEVEL_TEXT_MAP[grade]}`,
    description: () => `Ho√†n th√†nh 1 h√≤n ƒë·∫£o ·ªü L·ªõp ${GRADE_LEVEL_TEXT_MAP[grade]} v·ªõi ƒë·ªô kh√≥ "Kh√≥".`,
    icon: 'üî•',
    gradeSpecific: true,
    condition: (context: AchievementContext) => {
      const { selectedGrade, currentIslandDifficulty } = context; 
      if (selectedGrade !== grade || !context.islandProgress) return false; 
      return currentIslandDifficulty === IslandDifficulty.HARD;
    }
  })),
  ...(Object.values(GradeLevel).filter(g => typeof g === 'number' && g !== GradeLevel.FINAL) as GradeLevel[]).map(grade => ({
    id: `ACH_NO_HINT_HERO_G${grade}`,
    name: `Anh H√πng Kh√¥ng G·ª£i √ù L·ªõp ${GRADE_LEVEL_TEXT_MAP[grade]}`,
    description: () => `Ho√†n th√†nh 1 h√≤n ƒë·∫£o ·ªü L·ªõp ${GRADE_LEVEL_TEXT_MAP[grade]} m√† kh√¥ng s·ª≠ d·ª•ng g·ª£i √Ω n√†o.`,
    icon: 'üéØ',
    gradeSpecific: true,
    condition: (context: AchievementContext) => {
        const { selectedGrade, hintUsedInLastIslandCompletion } = context; 
      if (selectedGrade !== grade) return false;
      return hintUsedInLastIslandCompletion === false; 
    }
  })),
  ...(Object.values(GradeLevel).filter(g => typeof g === 'number' && g !== GradeLevel.FINAL) as GradeLevel[]).map(grade => ({
    id: `ACH_GRADE_HIGH_SCORER_G${grade}`,
    name: `Tay Ch∆°i ƒêi·ªÉm Cao L·ªõp ${GRADE_LEVEL_TEXT_MAP[grade]}`,
    description: () => `ƒê·∫°t t·ªïng c·ªông 100 ƒëi·ªÉm ·ªü L·ªõp ${GRADE_LEVEL_TEXT_MAP[grade]}.`,
    icon: 'üí∞', 
    gradeSpecific: true,
    condition: (context: AchievementContext) => {
      const { selectedGrade, currentOverallScore } = context;
      if (selectedGrade !== grade || currentOverallScore === undefined) return false;
      return currentOverallScore >= 100;
    }
  })),

  // --- Global Achievements ---
  {
    id: 'ACH_GRAND_CHAMPION',
    name: 'Nh√† V√¥ ƒê·ªãch Vƒ© ƒê·∫°i',
    description: () => 'Ho√†n th√†nh t·∫•t c·∫£ c√°c h√≤n ƒë·∫£o c·ªßa t·∫•t c·∫£ c√°c l·ªõp (tr·ª´ ƒê·∫£o Kho B√°u).',
    icon: 'üëë',
    gradeSpecific: false,
    isGlobal: true,
    condition: (context: AchievementContext) => {
      const { allGradesProgress, allGradeIslandConfigs } = context;
      if (!allGradesProgress || !allGradeIslandConfigs) return false;
      const normalGrades = Object.values(GradeLevel).filter(g => typeof g === 'number' && g !== GradeLevel.FINAL) as GradeLevel[];
      return normalGrades.every(grade => {
        const islandsInGrade = allGradeIslandConfigs.filter(i => i.targetGradeLevel === grade && i.islandId !== FINAL_TREASURE_ISLAND_ID);
        if (islandsInGrade.length === 0 || islandsInGrade.length < ISLANDS_PER_GRADE) return false; 
        const gradeProgress = allGradesProgress[grade];
        if (!gradeProgress) return false;
        return islandsInGrade.every(island => gradeProgress[island.islandId] === 'completed');
      });
    }
  },
  {
    id: 'ACH_STAR_GRANDMASTER',
    name: 'B·∫≠c Th·∫ßy Ng√†n Sao',
    description: () => 'ƒê·∫°t 5 sao cho t·∫•t c·∫£ c√°c h√≤n ƒë·∫£o c·ªßa t·∫•t c·∫£ c√°c l·ªõp (tr·ª´ ƒê·∫£o Kho B√°u).',
    icon: 'üåå',
    gradeSpecific: false,
    isGlobal: true,
    condition: (context: AchievementContext) => {
      const { allGradesStarRatings, allGradeIslandConfigs } = context;
      if (!allGradesStarRatings || !allGradeIslandConfigs) return false;
       const normalGrades = Object.values(GradeLevel).filter(g => typeof g === 'number' && g !== GradeLevel.FINAL) as GradeLevel[];
      return normalGrades.every(grade => {
        const islandsInGrade = allGradeIslandConfigs.filter(i => i.targetGradeLevel === grade && i.islandId !== FINAL_TREASURE_ISLAND_ID);
         if (islandsInGrade.length === 0 || islandsInGrade.length < ISLANDS_PER_GRADE) return false;
        const gradeStars = allGradesStarRatings[grade];
        if (!gradeStars) return false;
        return islandsInGrade.every(island => gradeStars[island.islandId] === 5);
      });
    }
  },
  {
    id: 'ACH_THEME_CHANGER',
    name: 'Nh√† T·∫°o M·ªët',
    description: () => 'Thay ƒë·ªïi giao di·ªán l·∫ßn ƒë·∫ßu ti√™n.',
    icon: 'üé®',
    gradeSpecific: false,
    isGlobal: true,
    condition: (context: AchievementContext) => {
      return context.themeSwapped === true;
    }
  },
   {
    id: 'ACH_MASTER_COLLECTOR',
    name: 'Nh√† S∆∞u T·∫ßm B·∫≠c Th·∫ßy',
    description: () => `Thu th·∫≠p t·∫•t c·∫£ ${COLLECTIBLE_ITEMS.length} v·∫≠t ph·∫©m s∆∞u t·∫ßm ƒë·ªôc ƒë√°o.`,
    icon: 'üè∫',
    gradeSpecific: false,
    isGlobal: true,
    condition: (context: AchievementContext) => {
        const { collectedItems } = context;
        if (!collectedItems) return false;
        return COLLECTIBLE_ITEMS.every(item => collectedItems[item.id]);
    }
  },
  {
    id: 'ACH_ENDLESS_PIONEER',
    name: 'Ng∆∞·ªùi Ti√™n Phong V√¥ T·∫≠n',
    description: () => 'M·ªü kh√≥a Ch·∫ø ƒë·ªô V√¥ T·∫≠n cho m·ªôt l·ªõp h·ªçc b·∫•t k·ª≥.',
    icon: '‚è≥',
    gradeSpecific: false,
    isGlobal: true,
    condition: (context: AchievementContext) => {
        const { isEndlessUnlockedForGrade } = context;
        if (!isEndlessUnlockedForGrade) return false;
        return Object.values(isEndlessUnlockedForGrade).some(unlocked => unlocked === true);
    }
  },
  {
    id: 'ACH_TREASURE_UNLOCKED',
    name: 'Truy T√¨m Kho B√°u',
    description: () => 'M·ªü kh√≥a ƒë∆∞·ª£c ƒê·∫£o Kho B√°u Cu·ªëi C√πng.',
    icon: 'üîë',
    gradeSpecific: false,
    isGlobal: true,
    condition: (context: AchievementContext) => {
        return context.isFinalIslandUnlocked === true;
    }
  },
  {
    id: 'ACH_FINAL_CONQUEROR',
    name: 'Chinh Ph·ª•c Cu·ªëi C√πng',
    description: () => 'Ho√†n th√†nh ƒê·∫£o Kho B√°u Cu·ªëi C√πng.',
    icon: 'üíé',
    gradeSpecific: false, 
    isGlobal: true,
    condition: (context: AchievementContext) => {
        const { selectedGrade, islandProgress, allGradesProgress } = context;
        let finalIslandProgress: IslandProgressState | undefined;
        if (selectedGrade === GradeLevel.FINAL && islandProgress) finalIslandProgress = islandProgress;
        else if (allGradesProgress) finalIslandProgress = allGradesProgress[GradeLevel.FINAL];
        if (!finalIslandProgress) return false;
        return finalIslandProgress[FINAL_TREASURE_ISLAND_ID] === 'completed';
    }
  },
   {
    id: 'ACH_DAILY_CHALLENGER',
    name: 'Th·ª≠ Th√°ch Gia',
    description: () => 'Ho√†n th√†nh 1 th·ª≠ th√°ch h√†ng ng√†y.',
    icon: 'üìÖ',
    gradeSpecific: false,
    isGlobal: true,
    condition: (context: AchievementContext) => {
        return context.completedDailyChallengesCount !== undefined && context.completedDailyChallengesCount >= 1;
    }
  },
  {
    id: 'ACH_DAILY_STREAKER_5', // Renamed for clarity for 5 days
    name: 'V·∫≠n May 5 Ng√†y',
    description: () => 'Ho√†n th√†nh 5 th·ª≠ th√°ch h√†ng ng√†y (kh√¥ng nh·∫•t thi·∫øt li√™n ti·∫øp).',
    icon: 'üóìÔ∏è', 
    gradeSpecific: false,
    isGlobal: true,
    condition: (context: AchievementContext) => {
        return context.completedDailyChallengesCount !== undefined && context.completedDailyChallengesCount >= 5;
    }
  },
  {
    id: 'ACH_DAILY_STREAKER_10', // Added 10 days
    name: 'Si√™u Sao Th·ª≠ Th√°ch 10 Ng√†y',
    description: () => 'Ho√†n th√†nh 10 th·ª≠ th√°ch h√†ng ng√†y.',
    icon: 'üåüüóìÔ∏è', 
    gradeSpecific: false,
    isGlobal: true,
    condition: (context: AchievementContext) => {
        return context.completedDailyChallengesCount !== undefined && context.completedDailyChallengesCount >= 10;
    }
  },
  {
    id: 'ACH_GEM_HOARDER',
    name: 'Nh√† S∆∞u T·∫ßm ƒê√° Qu√Ω',
    description: () => 'T√≠ch l≈©y ƒë∆∞·ª£c 100 ƒê√° Qu√Ω.',
    icon: 'üíç', 
    gradeSpecific: false,
    isGlobal: true,
    condition: (context: AchievementContext) => {
        return context.playerGems !== undefined && context.playerGems >= 100;
    }
  },
  {
    id: 'ACH_GEM_MILLIONAIRE', // New
    name: 'Tri·ªáu Ph√∫ ƒê√° Qu√Ω',
    description: () => 'T√≠ch l≈©y ƒë∆∞·ª£c 500 ƒê√° Qu√Ω.',
    icon: 'üíéüëë', 
    gradeSpecific: false,
    isGlobal: true,
    condition: (context: AchievementContext) => {
        return context.playerGems !== undefined && context.playerGems >= 500;
    }
  },
  {
    id: 'ACH_WEEKLY_WARRIOR', // New for weekly challenges
    name: 'Chi·∫øn Binh Tu·∫ßn Ho√†n',
    description: () => 'Ho√†n th√†nh 1 th·ª≠ th√°ch h√†ng tu·∫ßn.',
    icon: 'üõ°Ô∏è',
    gradeSpecific: false,
    isGlobal: true,
    condition: (context: AchievementContext) => {
      return context.completedWeeklyChallengesCount !== undefined && context.completedWeeklyChallengesCount >= 1;
    }
  },
  {
    id: 'ACH_WEEKLY_LEGEND', // New for weekly challenges
    name: 'Huy·ªÅn Tho·∫°i Tu·∫ßn Ho√†n',
    description: () => 'Ho√†n th√†nh 4 th·ª≠ th√°ch h√†ng tu·∫ßn (t·ª©c 1 th√°ng).',
    icon: 'üèÜüõ°Ô∏è',
    gradeSpecific: false,
    isGlobal: true,
    condition: (context: AchievementContext) => {
      return context.completedWeeklyChallengesCount !== undefined && context.completedWeeklyChallengesCount >= 4;
    }
  },
  {
    id: 'ACH_FIRST_TREASURE',
    name: 'Kho B√°u ƒê·∫ßu Ti√™n',
    description: () => 'M·ªü chi·∫øc r∆∞∆°ng b√°u ƒë·∫ßu ti√™n c·ªßa b·∫°n.',
    icon: 'üéÅ',
    gradeSpecific: false,
    isGlobal: true,
    condition: () => true, 
  },
  {
    id: 'ACH_MESSAGE_READER',
    name: 'Ng∆∞·ªùi ƒê·ªçc Th√¥ng ƒêi·ªáp',
    description: () => 'ƒê·ªçc th√¥ng ƒëi·ªáp trong chai ƒë·∫ßu ti√™n.',
    icon: 'üìú',
    gradeSpecific: false,
    isGlobal: true,
    condition: () => true, 
  },
  {
    id: 'ACH_LUCKY_STAR_CATCHER',
    name: 'Tay B·∫Øt Sao',
    description: () => 'B·∫Øt ƒë∆∞·ª£c m·ªôt ng√¥i sao may m·∫Øn.',
    icon: 'üå†',
    gradeSpecific: false,
    isGlobal: true,
    condition: () => true, 
  },
  {
    id: 'ACH_NPC_FRIEND',
    name: 'B·∫°n C·ªßa Mu√¥n Lo√†i',
    description: () => 'T∆∞∆°ng t√°c v·ªõi m·ªôt nh√¢n v·∫≠t th√¢n thi·ªán l·∫ßn ƒë·∫ßu ti√™n.',
    icon: 'ü§ù',
    gradeSpecific: false,
    isGlobal: true,
    condition: () => true, 
  },
];
